<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从stata迁移到python(一)：文件读取</title>
    <url>/2023/02/23/%E4%BB%8Estata%E5%90%91python%E8%BF%81%E7%A7%BB(%E4%B8%80)%EF%BC%9A%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/02/25/bymh6Is2MjYglVp.jpg" alt="pic1.jpg"></p>
<blockquote>
<p>本文原创，转载请先联系。</p>
<p><strong>参考：</strong> pandas官方文档之<em>Comparison with Stata</em></p>
</blockquote>
<hr>
<hr>
<h2 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h2>
<p>Stata作为一款专业的计量分析软件工具，虽然在传统数据分析领域表现出色，但是它在处理大数据和非结构化数据面前明显缺乏优势，更不要说它在机器学习和深度学习模块上的限制。 因此，<strong>掌握Python已经成为了我们进行系统学习文本分析一个必要前提</strong>。</p>
<p>早在之前我自己学习Python运用其进行数据分析时候，我觉得找到一本Stata-Python对应参照指南非常重要，因为我发现Stata和Python在数据处理的底层逻辑上其实差别相当大。因此，对于那些已经习惯了使用Stata甚至对其有严重路径依赖的人（比如我）来说，在最初入门Python数据处理可能会是一件困难的事情。</p>
<p><strong>从Stata迁移到Python”的系列推文</strong>参考pandas官方文档之<em>Comparison with Stata</em>，并按照我自己的思路进行撰写。旨在帮助那些习惯使用Stata的人逐步掌握Python的基础知识，并顺利迁移他们的数据处理框架。文章会重点介绍一些常见的数据处理和统计分析的过程，并同时使用Stata和Python代码进行演示，使读者更好地理解两者之间的基本等价命令和区别。</p>
<p><strong>本文假设你已经提前学会了安装并成功配置了python/anaconda，以及会打开和使用jupyternotebook，如果还没有，请先在搜索引擎上学习以上的安装教程。</strong></p>
<hr>
<h2 id="库的安装"><a class="header-anchor" href="#库的安装">¶</a>库的安装</h2>
<p>在Python中进行数据分析必要的库包括：NumPy、Pandas等。我们需要安装它们。</p>
<p>库的安装：Python和Stata都有自己的库管理工具，Python可以使用pip/conda，Stata使用ssc/net。用户可以通过这些工具方便地下载、安装和更新库。</p>
<ul>
<li>使用pip安装：pip install pandas</li>
<li>使用conda安装：conda install panda</li>
</ul>
<p>Stata在本地安装完后,在后续跑代码时不必特别申明引入，但是Python需要在代码开头用<code>import</code>对库进行导入。</p>
<p>如下，import语句用于引入pandas库并将其命名为“pd”，以便在后续代码中使用pandas库中的函数和方法。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这将使得pandas库中的函数和方法能够通过pd对象进行调用。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'filename.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中，<code>pd.read_csv()</code>是<code>pandas</code>库中的一个方法。这里我们可以来首次认识一下Python语言的风格。</p>
<p>在 Python 中，句点（“.”）是一个运算符，它用于访问对象的属性和方法。其中，<code>.</code> 的前面是模块名或对象名，<code>.</code>的后面是属性名或方法名。使用句点访问属性或方法可以使代码更加简洁和易于阅读。</p>
<p>上面的代码中，<code>pd</code> 是我们给pandas模块的别名（也可以说是一个命名空间），包含了许多 Pandas 函数和类。而 <code>read_csv()</code> 是 Pandas 中的一个函数，用于从 CSV 文件中读取数据。</p>
<p>因此，当我们写 <code>pd.read_csv()</code> 时，句点用于访问 Pandas 模块中的<code>read_csv()</code> 函数，并进行调用。</p>
<hr>
<h2 id="数据结构"><a class="header-anchor" href="#数据结构">¶</a>数据结构</h2>
<h3 id="DataFrame"><a class="header-anchor" href="#DataFrame">¶</a>DataFrame</h3>
<p>Pandas中的<code>DataFrame</code>类似于Stata数据集，以⼀张矩阵（行×列）的形式呈现，可以使用行和列的标签或索引访问单个值、行或列的数据。其中，行的索引是index，列的索引是colunms（直觉上，你可以理解为图片最左边和最上面的深灰色区域）。<br>
<img src="https://s2.loli.net/2023/02/25/IAwmefqghbjXa8d.png" alt="pic2.jpg"></p>
<h3 id="Series"><a class="header-anchor" href="#Series">¶</a>Series</h3>
<p>DataFrame的每一列都是一个<code>Series</code>对象，每个<code>Series</code>对象只能存储一种数据类型。但是，不同的列可以有不同的数据类型。它是pandas中的一种单独的数据结构，但Stata没有单独为单列设计的数据结构。Series中的每个元素都有一个索引（上面讲的columns），该索引可以是任意数据类型，通常是整数或字符串。</p>
<p><strong>一定要记住Series（列）的概念，它在pandas中很重要。许多其他Pandas数据结构，如DataFrame和Panel，都是基于Series构建的，而不是行！</strong></p>
<h3 id="Index"><a class="header-anchor" href="#Index">¶</a>Index</h3>
<p>每个DataFrame和Series都有一个Index索引，索引可以被指定，如果没有指定，默认是整数（第一行 = 0，第二行 = 1，依此类推）。</p>
<p>Stata中没有一个对应的概念，但直觉上（也仅仅是直觉上！），你可以简单理解为，类似于你打开Stata数据浏览窗口时，数据集最左侧的1，2，3……。在 Stata 中，除了可以用暗含索引<code>_n</code>访问行外，数据基本没有行标签。</p>
<p><img src="https://s2.loli.net/2023/02/25/rqtYWBpXcz9xLl5.png" alt="pic3.jpg"></p>
<hr>
<h2 id="路径设置"><a class="header-anchor" href="#路径设置">¶</a>路径设置</h2>
<p>在正式读入和输出之前，我们需要学会查看和设置工作路径。</p>
<p>stata命令如下</p>
<pre class="line-numbers language-stata" data-language="stata"><code class="language-stata"><span class="token operator">#</span>查看当前工作路径
<span class="token command keyword">pwd</span>        
<span class="token operator">#</span>设定工作路径
<span class="token command keyword">cd</span> E<span class="token punctuation">:</span>\Stata16\ado      
<span class="token operator">#</span>显示当前工作路径下文件
<span class="token command keyword">dir</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而在Python中，我们需要用到os库。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os

<span class="token comment">#查看当前工作路径</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 更改工作目录</span>
os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'./folder'</span><span class="token punctuation">)</span>

<span class="token comment"># 创建目录</span>
os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./folder'</span><span class="token punctuation">)</span>

<span class="token comment"># 删除目录</span>
os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'./folder'</span><span class="token punctuation">)</span>

<span class="token comment"># 获取指定目录下的文件列表</span>
file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./folder'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，这里的<code>'./folder'</code>是一种相对路径的写法。‘.‘表示当前目录，所以’./folder’表示当前目录下的子目录’folder’。相对路径的好处在于它可以根据当前工作目录的位置相对灵活地改变，而不需要改变绝对路径中的目录结构。更多关于相对路径的知识请大家自己搜索。</p>
<hr>
<h2 id="读入数据"><a class="header-anchor" href="#读入数据">¶</a>读入数据</h2>
<p>我们这里直接关注读入外部数据（因为手动input真的很少有人用）。</p>
<ul>
<li>Stata读取xls，csv, 和txt</li>
</ul>
<pre class="line-numbers language-stata" data-language="stata"><code class="language-stata"><span class="token operator">#</span> xls
<span class="token command keyword">import</span> excel <span class="token string-literal"><span class="token string">"filename.xls"</span></span><span class="token punctuation">,</span> <span class="token keyword">clear</span> 

<span class="token operator">#</span> txt
<span class="token command keyword">import</span> delimited using <span class="token string-literal"><span class="token string">"filename.txt"</span></span> <span class="token punctuation">,</span><span class="token keyword">clear</span>

<span class="token operator">#</span> csv
<span class="token command keyword">insheet</span> using <span class="token string-literal"><span class="token string">"filename.txt"</span></span><span class="token punctuation">,</span> <span class="token keyword">clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Pandas读取文件</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># xlsx</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'filename.xlsx'</span><span class="token punctuation">)</span>
<span class="token comment"># txt</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'filename.txt'</span><span class="token punctuation">)</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'filename.txt'</span><span class="token punctuation">)</span>
<span class="token comment"># csv</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'filename.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>pd.read_table()</code>函数默认使用制表符作为分隔符来读取文本文件。而<code>pd.read_csv()</code>函数默认使用逗号作为分隔符来读取文本文件,他们实质上是通用的。<code>pd.read_csv</code>将第一行默认为标题行即列名，行索引为自动添加。</p>
<p>pandas 也可以读取.dta带有<code>read_stata()</code>函数格式的 Stata 数据集。</p>
<pre class="line-numbers language-none"><code class="language-none">df &#x3D; pd.read_stata(&quot;data.dta&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<hr>
<h2 id="常用读入参数设置"><a class="header-anchor" href="#常用读入参数设置">¶</a>常用读入参数设置</h2>
<p>我们还可以有以下的参数设置：</p>
<p>csv文件</p>
<ul>
<li>filepath_or_buffer：文件路径或缓冲区对象</li>
<li>sep：字段分隔符，默认为逗号</li>
<li>header：指定哪一行为列名，默认为0，即第一行</li>
<li>index_col：指定哪一列为索引，默认为None</li>
<li>usecols：指定要读取哪些列</li>
<li>nrows：指定要读取的行数</li>
<li>na_values：指定哪些值为缺失值</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 读取csv文件</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> na_values<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>

<span class="token comment"># 打印数据框的前5行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>excel文件</p>
<ul>
<li>io：文件名或类似文件对象的参数</li>
<li>sheet_name：要读取的工作表的名称或索引，默认为第一个工作表</li>
<li>header：指定哪一行为列名，默认为0，即第一行</li>
<li>index_col：指定哪一列为索引，默认为None</li>
<li>usecols：指定要读取哪些列</li>
<li>nrows：指定要读取的行数</li>
<li>na_values：指定哪些值为缺失值</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取Excel文件</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> na_values<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<hr>
<h2 id="查看数据"><a class="header-anchor" href="#查看数据">¶</a>查看数据</h2>
<p>默认情况下，pandas 会截断数据集的行的打印输出。这可以通过更改pandas选项设置或使用<code>DataFrame.head()</code>和<code>DataFrame.tail()</code>。</p>
<pre class="line-numbers language-none"><code class="language-none"># 查看数据集前五行
df.head(5)
# 查看数据集后五行
df.tail(5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而stata中的等价命令是：</p>
<pre class="line-numbers language-none"><code class="language-none">list in 1&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果你的列数过多，在pandas的打印输出中也会被折叠的情况，可以使用 <code>pd.set_option() </code>函数设置打印选项，以控制 Pandas 数据框在控制台中的输出。可以在代码开头引入pandas时一并进行设置，以取消折叠功能。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<hr>
<h2 id="输出数据"><a class="header-anchor" href="#输出数据">¶</a>输出数据</h2>
<p>在Stata中，可以使用export命令将数据输出到.dta、.csv和.txt等格式的文件中。在Python中，可以使用pandas包中的<code>to_stata</code>、<code>to_csv</code>和<code>to_excel</code>等函数将数据输出到不同格式的文件中。</p>
<p>以下是将数据输出到不同格式文件的代码示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将数据输出为.dta格式</span>
df<span class="token punctuation">.</span>to_stata<span class="token punctuation">(</span><span class="token string">'data.dta'</span><span class="token punctuation">)</span>

<span class="token comment"># 将数据输出为.csv格式</span>
df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">)</span>

<span class="token comment"># 将数据输出为.xlsx格式</span>
df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span>

<span class="token comment"># 将数据输出为.txt格式</span>
df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="常用输出参数设置"><a class="header-anchor" href="#常用输出参数设置">¶</a>常用输出参数设置</h2>
<h3 id="to-csv"><a class="header-anchor" href="#to-csv">¶</a>to_csv()</h3>
<ul>
<li>sep: str, default ‘,’，表示用于分隔数据的字符</li>
<li>header: bool or list of str, default True，表示是否在输出文件中包含列名，或指定输出的列名列表</li>
<li>index: bool, default True，表示是否在输出文件中包含行索引</li>
<li>encoding: str, default ‘utf-8’，表示输出文件的编码方式</li>
</ul>
<h3 id="to-excel"><a class="header-anchor" href="#to-excel">¶</a>to_excel()</h3>
<ul>
<li>sheet_name: str, default ‘Sheet1’，表示输出到Excel中的工作表名</li>
<li>header: bool or list of str, default True，表示是否在输出文件中包含列名，或指定输出的列名列表</li>
<li>index: bool, default True，表示是否在输出文件中包含行索引</li>
<li>encoding: str, default ‘utf-8’，表示输出文件的编码方式</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将DataFrame数据写入csv文件</span>
df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'output.csv'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

<span class="token comment"># 将DataFrame数据写入Excel文件</span>
df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'output.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结束语"><a class="header-anchor" href="#结束语">¶</a>结束语</h2>
<p>未完待续，该系列其他推文正在撰写，敬请期待。</p>
]]></content>
      <categories>
        <category>Switch from Stata to Python</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
</search>
