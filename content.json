{"meta":{"title":"TextMatters","subtitle":"","description":"","author":"FanFan","url":"http://example.com","root":"/"},"pages":[{"title":"Tags","date":"2023-02-23T06:01:24.476Z","updated":"2023-02-23T06:01:24.476Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-02-23T05:47:37.000Z","updated":"2023-02-23T06:01:51.863Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-02-23T11:12:55.000Z","updated":"2023-02-24T17:54:18.146Z","comments":true,"path":"resources/index.html","permalink":"http://example.com/resources/index.html","excerpt":"","text":"Recommended Resources for Textual AnalysisTextual Analysis in Accounting: What’s Next?[J]. Contemporary Accounting Research, 2022. Bochkay KBrown S V 旨在将向大家介绍一些值得推荐的文本分析资源 Basic Tool Kit nltk scikit-learn Python libraries Spacy Flair Stanza &#x2F; Stanford NLP fastText Flair Gensim Pattern PyNLPl Repositories of NLP Models Hugging Face Additional resourcesDictionaries Loughran-McDonald repository Data Library Hoberg-Phillips Python tutorial www.textart.us FinBERT Libraries [Huang et al. (2022)] (https://github.com/yya518/FinBERT) Other datasets or code Conference call measures Conference call linguistic complexity MD&amp;A year-over-year similarity Downloading tweets Corporate culture"}],"posts":[{"title":"从stata向python迁移(一)：文件读取","slug":"从stata向python迁移(一)：文件读取","date":"2023-02-23T11:03:35.000Z","updated":"2023-02-25T07:21:32.836Z","comments":true,"path":"2023/02/23/从stata向python迁移(一)：文件读取/","link":"","permalink":"http://example.com/2023/02/23/%E4%BB%8Estata%E5%90%91python%E8%BF%81%E7%A7%BB(%E4%B8%80)%EF%BC%9A%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/","excerpt":"","text":"本文原创，转载请先联系。 参考： pandas官方文档之Comparison with Stata 0.写在前面Stata作为一款专业的计量分析软件工具，虽然在传统数据分析领域表现出色，但是它在处理大数据和非结构化数据面前明显缺乏优势，更不要说它在机器学习和深度学习模块上的限制。 因此，掌握Python已经成为了我们进行系统学习文本分析一个必要前提。 早在之前我自己学习Python运用其进行数据分析时候，我觉得找到一本Stata-Python对应参照指南非常重要，因为我发现Stata和Python在数据处理的底层逻辑上其实差别相当大。因此，对于那些已经习惯了使用Stata甚至对其有严重路径依赖的人（比如我）来说，在最初入门Python数据处理可能会是一件困难的事情。 “从Stata迁移到Python”的系列推文参考pandas官方文档之Comparison with Stata，并按照我自己的思路进行撰写。旨在帮助那些习惯使用Stata的人逐步掌握Python的基础知识，并顺利迁移他们的数据处理框架。文章会重点介绍一些常见的数据除了和统计分析的过程，并同时使用Stata和Python代码进行演示，使读者更好地理解两者之间的基本等价命令和区别。 本文假设你已经提前学会了安装并成功配置了python&#x2F;anaconda，以及会打开和使用jupyternotebook，如果还没有，请先在搜索引擎上学习以上的安装教程。 1.库的安装在Python中进行数据分析必要的库包括：NumPy、Pandas等。我们需要安装它们。 库的安装：Python和Stata都有自己的库管理工具，Python可以使用pip&#x2F;conda，Stata使用ssc&#x2F;net。用户可以通过这些工具方便地下载、安装和更新库。 使用pip安装：pip install pandas 使用conda安装：conda install panda Stata在本地安装完后,在后续跑代码时不必特别申明引入，但是Python需要在代码开头用 import对库进行导入。 如下，import语句用于引入pandas库并将其命名为“pd”，以便在后续代码中使用pandas库中的函数和方法。 import pandas as pd 这将使得pandas库中的函数和方法能够通过pd对象进行调用，例如： df = pd.DataFrame(mydata) 其中，pd.DataFrame是 pandas库中的一个方法，用于创建一个DataFrame对象，将数据 mydata作为输入。 2.数据结构DataFramePandas中的 DataFrame类似于Stata数据集，以⼀张矩阵（行×列）的形式呈现，可以使用行和列的标签或索引访问单个值、行或列的数据。其中，行的索引是index，列的索引是colunms（直觉上，你可以理解为图片最左边和最上面的深灰色区域）。 SeriesDataFrame的每一列都是一个 Series对象，每个 Series对象只能存储一种数据类型。但是，不同的列可以有不同的数据类型。它是pandas中的一种单独的数据结构，但Stata没有单独为单列设计的数据结构。Series中的每个元素都有一个索引（上面讲的columns），该索引可以是任意数据类型，通常是整数或字符串。 一定要记住Series（列）的概念，它在pandas中很重要。许多其他Pandas数据结构，如DataFrame和Panel，都是基于Series构建的，而不是行！ Index每个DataFrame和Series都有一个Index索引，索引可以被指定，如果没有指定，默认是整数（第一行 &#x3D; 0，第二行 &#x3D; 1，依此类推）。 Stata中没有一个对应的概念，但直觉上（也仅仅是直觉上！），你可以简单理解为，类似于你打开Stata数据浏览窗口时，数据集最左侧的1，2，3……。在 Stata 中，除了可以用暗含索引 _n访问行外，数据基本没有行标签。 读入数据我们这里直接关注读入外部数据（因为手动input真的很少有人用）。 Stata读取xls，csv, 和txt # xls import excel \"filename.xls\", clear sheet(sheername) firstrow # txt import delimited using \"filename.txt\" ,clear # csv insheet using \"filename.txt\", clear Pandas读取文件 import pandas as pd # xlsx df = pd.read_excel('filename.xlsx') # txt df = pd.read_table('filename.txt') df = pd.read_csv('filename.txt') # csv df = pd.read_csv('filename.csv') pd.read_table()函数默认使用制表符作为分隔符来读取文本文件。而 pd.read_csv()函数默认使用逗号作为分隔符来读取文本文件,他们实质上是通用的。pd.read_csv将第一行默认为标题行即列名，行索引为自动添加。 pandas 也可以读取.dta带有 read_stata()函数格式的 Stata 数据集。 df &#x3D; pd.read_stata(&quot;data.dta&quot;) 3.常用读入参数设置我们还可以有以下的参数设置： csv文件 filepath_or_buffer：文件路径或缓冲区对象 sep：字段分隔符，默认为逗号 header：指定哪一行为列名，默认为0，即第一行 index_col：指定哪一列为索引，默认为None usecols：指定要读取哪些列 nrows：指定要读取的行数 na_values：指定哪些值为缺失值 import pandas as pd # 读取csv文件 df = pd.read_csv('data.csv', sep=',', header=0, index_col=None, usecols=None, nrows=None, na_values=None) # 打印数据框的前5行 print(df.head()) excel文件 io：文件名或类似文件对象的参数 sheet_name：要读取的工作表的名称或索引，默认为第一个工作表 header：指定哪一行为列名，默认为0，即第一行 index_col：指定哪一列为索引，默认为None usecols：指定要读取哪些列 nrows：指定要读取的行数 na_values：指定哪些值为缺失值 # 读取Excel文件 df = pd.read_excel('data.xlsx', sheet_name='Sheet1', header=0, index_col=None, usecols=None, nrows=None, na_values=None) # 打印数据框的前5行 print(df.head()) 4.输出数据在Stata中，可以使用export命令将数据输出到.dta、.csv和.txt等格式的文件中。在Python中，可以使用pandas包中的 to_stata、to_csv和 to_excel等函数将数据输出到不同格式的文件中。 以下是将数据输出到不同格式文件的代码示例： # 将数据输出为.dta格式 df.to_stata('data.dta') # 将数据输出为.csv格式 df.to_csv('data.csv') # 将数据输出为.xlsx格式 df.to_excel('data.xlsx') # 将数据输出为.txt格式 df.to_csv('data.txt', sep='\\t') 5.常用输出参数设置to_csv(): sep: str, default ‘,’，表示用于分隔数据的字符 header: bool or list of str, default True，表示是否在输出文件中包含列名，或指定输出的列名列表 index: bool, default True，表示是否在输出文件中包含行索引 encoding: str, default ‘utf-8’，表示输出文件的编码方式 mode: str, default ‘w’，表示打开文件的模式，’w’表示覆盖写入，’a’表示追加写入 to_excel(): excel_writer: str or ExcelWriter object，表示输出文件的路径或ExcelWriter对象 sheet_name: str, default ‘Sheet1’，表示输出到Excel中的工作表名 header: bool or list of str, default True，表示是否在输出文件中包含列名，或指定输出的列名列表 index: bool, default True，表示是否在输出文件中包含行索引 encoding: str, default ‘utf-8’，表示输出文件的编码方式 mode: str, default ‘w’，表示打开文件的模式，’w’表示覆盖写入，’a’表示追加写入 # 将DataFrame数据写入csv文件 df.to_csv('output.csv', sep='\\t', header=True, index=False, encoding='utf-8') # 将DataFrame数据写入Excel文件 df.to_excel('output.xlsx', sheet_name='Sheet1', header=True, index=False, encoding='utf-8') 结束语未完待续，该系列其他推文正在撰写，敬请期待。","categories":[{"name":"stata","slug":"stata","permalink":"http://example.com/categories/stata/"}],"tags":[{"name":"code","slug":"code","permalink":"http://example.com/tags/code/"}],"author":"siyu"},{"title":"Hello World","slug":"hello-world","date":"2023-02-21T09:50:26.759Z","updated":"2023-02-23T15:42:41.464Z","comments":true,"path":"2023/02/21/hello-world/","link":"","permalink":"http://example.com/2023/02/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://example.com/tags/paper/"}]}],"categories":[{"name":"stata","slug":"stata","permalink":"http://example.com/categories/stata/"},{"name":"paper","slug":"paper","permalink":"http://example.com/categories/paper/"}],"tags":[{"name":"code","slug":"code","permalink":"http://example.com/tags/code/"},{"name":"paper","slug":"paper","permalink":"http://example.com/tags/paper/"}]}